/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include "../zmk-nodefree-config-main/helper.h"
#include "keypos_glove80.h"

#define HYPER LC(LS(LG(LALT)))

// MARK: Layer definitions
#define Base 0
#define Symbols 1
#define Magic 2
#define Numbers 3
#define Factory 4
#define Cursor 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

// MARK: Nav cluster

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

// MARK: Global settings

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// MARK: Combos

// Combo LShift + RShift triggers Caps Word
ZMK_COMBO(caps_word, &caps_word, 52 57, ALL, 50)

// MARK: Behaviors

ZMK_BEHAVIOR(thumb_layer, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <300>;
    bindings = <&mo>, <&kp>;
)

ZMK_BEHAVIOR(magic, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    bindings = <&mo>, <&rgb_ug_status_macro>;
)

ZMK_BEHAVIOR(rgb_ug_status_macro, macro,
    bindings
        = <&rgb_ug RGB_STATUS>;
)

ZMK_BEHAVIOR(bt_0, macro,
    bindings
        = <&out OUT_BLE>,
          <&bt BT_SEL 0>;
)

ZMK_BEHAVIOR(bt_1, macro,
    bindings
        = <&out OUT_BLE>,
          <&bt BT_SEL 1>;
)

ZMK_BEHAVIOR(bt_2, macro,
    bindings
        = <&out OUT_BLE>,
          <&bt BT_SEL 2>;
)

ZMK_BEHAVIOR(bt_3, macro,
    bindings
        = <&out OUT_BLE>,
          <&bt BT_SEL 3>;
)

//////////////////////////////////////////////////////////////////////////
//
// Approximation of Pascal Getreuer's Select Word macro from QMK
// - https://getreuer.info/posts/keyboards/select-word/index.html
//
//////////////////////////////////////////////////////////////////////////

// SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
// after moving the cursor before it selects a word.  A larger delay
// may allow the macro to move to the next word upon each invocation.
#define SELECT_WORD_DELAY 1

ZMK_BEHAVIOR(select_none, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
)

// select a word (jumps to next word upon each successive invocation)
ZMK_BEHAVIOR(select_word, mod_morph,
    bindings = <&select_word_right>, <&select_word_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(select_word_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
)
ZMK_BEHAVIOR(select_word_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LA(LS(LEFT))>;
)

// extend current selection by one word
ZMK_BEHAVIOR(extend_word, mod_morph,
    bindings = <&extend_word_right>, <&extend_word_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(extend_word_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(LS(RIGHT))>;
)
ZMK_BEHAVIOR(extend_word_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(LS(LEFT))>;
)

// select current line
ZMK_BEHAVIOR(select_line, mod_morph,
    bindings = <&select_line_right>, <&select_line_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(select_line_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp HOME &kp LS(END)>;
)
ZMK_BEHAVIOR(select_line_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp END &kp LS(HOME)>;
)

// extend current selection by one line
ZMK_BEHAVIOR(extend_line, mod_morph,
    bindings = <&extend_line_right>, <&extend_line_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(extend_line_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LS(DOWN) &kp LS(END)>;
)
ZMK_BEHAVIOR(extend_line_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LS(UP) &kp LS(HOME)>;
)

// MARK: Layers

ZMK_LAYER(base,
    &kp F1          &kp F2            &kp F3         &kp F4         &kp F5                                                                                                                                                                  &kp F6    &kp F7      &kp F8    &kp F9     &kp F10
    &trans          &kp N1            &kp N2         &kp N3         &kp N4      &kp N5                                                                                                                                             &kp N6   &kp N7    &kp N8      &kp N9    &kp N0     &kp MINUS
    &kp TAB         &kp Q             &kp W          &kp F          &kp P       &kp G                                                                                                                                              &kp J    &kp L     &kp U       &kp Y     &kp SEMI   &kp BSLH
    &kp ESC         &kp A             &kp R          &kp S          &kp T       &kp D                                                                                                                                              &kp H    &kp N     &kp E       &kp I     &kp O      &kp SQT
    &kp GRAVE       &kp Z             &kp X          &kp C          &kp V       &kp B   &kp LSHFT                       &kp LGUI                     &kp LCTRL  &kp RCTRL  &kp RGUI  &kp RSHFT                                     &kp K    &kp M     &kp COMMA   &kp DOT   &kp FSLH   &kp PG_UP
    &magic Magic 0  &kp LG(LA(BSLH))  &kp LA(SPACE)  NAV_LEFT       NAV_RIGHT           &thumb_layer Symbols NAV_BSPC   &thumb_layer CURSOR ENTER    &kp LALT   &kp RALT   &thumb_layer Numbers TAB   &thumb_layer Symbols SPACE   NAV_UP   NAV_DOWN  &kp LBKT    &kp RBKT  &kp PG_DN
)

ZMK_LAYER(symbols,
    &kp C_BRI_DN    &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                                                                 &kp C_MUTE     &kp C_VOL_DN  &kp C_VOL_UP  &trans  &trans
    &trans          &trans        &trans      &trans      &trans     &kp BSLH                                                                                                      &trans          &trans         &trans        &trans        &trans  &trans
    &trans          &kp CARET     &kp AMPS    &kp STAR    &kp PLUS   &kp PIPE                                                                                                      &kp LC(N5)      &kp LC(N6)     &kp LPAR      &kp RPAR      &trans  &trans
    &trans          &kp GRAVE     &kp DLLR    &kp PRCNT   &kp EQUAL  &kp MINUS                                                                                                     &kp LG(LS(A))   &kp LG(LS(O))  &kp LBRC      &kp RBRC      &trans  &trans
    &trans          &kp TILDE     &kp EXCL    &kp AT      &kp HASH   &kp UNDER  &kp LG(LS(J))      &kp LG(LC(J))      &trans  &kp LG(LS(F))  &kp LG(LA(LBKT))  &kp LG(LA(RBKT))    &kp LG(B)       &kp LG(R)      &kp LBKT      &kp RBKT      &trans  &trans
    &magic Magic 0  &kp CAPS      &kp INS     &kp F11     &kp F12               &kp LG(LC(LEFT))   &kp LG(LC(RIGHT))  &trans  &trans         &trans            &trans              &kp LG(LC(R))   &trans         &trans        &trans        &trans
)

ZMK_LAYER(magic,
    &bt BT_CLR    &none            &none            &none            &none                                                                                           &none   &none   &none   &none  &bt BT_CLR_ALL
    &none         &none            &none            &none            &none            &none                                                                  &none   &none   &none   &none   &none  &none
    &none         &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                        &none   &none   &none   &none   &none  &none
    &bootloader   &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                        &none   &none   &none   &none   &none  &bootloader
    &sys_reset    &none            &none            &none            &none            &none            &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none  &sys_reset
    &none         &none            &none            &none            &none                             &bt_0   &bt_1  &out OUT_USB   &none   &none   &none   &none   &none   &none   &none   &to 4
)

ZMK_LAYER(numbers,
    &none   &none   &none   &none   &none                                                                                &none   &none   &none   &none      &none
    &none   &none   &none   &none   &none   &kp CARET                                                         &kp CARET  &none   &none   &none   &none      &none
    &none   &none   &kp 7   &kp 8   &kp 9   &kp PRCNT                                                         &kp PRCNT  &kp N7  &kp N8  &kp N9  &kp COLON  &none
    &none   &none   &kp 4   &kp 5   &kp 6   &kp PLUS                                                          &kp PLUS   &kp N4  &kp N5  &kp N6  &kp MINUS  &none
    &none   &none   &kp 1   &kp 2   &kp 3   &kp STAR    &none   &none   &none      &trans  &trans   &trans    &kp STAR   &kp N1  &kp N2  &kp N3  &kp FSLH   &none
    &none   &none   &none   &none   &none               &kp N0  &kp DOT &kp COMMA  &trans  &trans   &trans    &none      &none   &none   &none   &none
)

ZMK_LAYER(cursor,
    &none   &none   &none   &none   &none                                                                            &none         &none  &none  &none  &none
    &none   &none   &none   &none   &none   &none                                                      &none         &none         &none  &none  &none  &none
    &none   &none   &none   &none   &none   &none                                                      &none         &none         &none  &none  &none  &none
    &none   &none   &none   &none   &none   &none                                                      &select_none  &extend_line  &extend_word  &none  &none  &none
    &none   &none   &none   &none   &none   &none   &none  &none  &none  &none  &none  &none  &none    &kp LG(A)     &select_line  &select_word  &none  &none
    &none   &none   &none   &none   &none           &none  &none  &none  &none  &none  &none  &none    &none         &none         &none         &none
)

// ZMK_LAYER(empty,
//     &none   &none   &none   &none   &none                                                                     &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none                                                      &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none                                                      &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none                                                      &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none   &none  &none  &none  &none  &none  &none  &none    &none  &none   &none  &none  &none
//     &none   &none   &none   &none   &none           &none  &none  &none  &none  &none  &none  &none    &none  &none   &none  &none
// )
